
Flashlight.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000014a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000019e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063c  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f9  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000326  00000000  00000000  00000d79  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000311  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  00001451  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001645  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	49 c0       	rjmp	.+146    	; 0x96 <__vector_1>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	32 d0       	rcall	.+100    	; 0x90 <main>
  2c:	8c c0       	rjmp	.+280    	; 0x146 <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <init>:
#include <util/delay.h>
#include <avr/interrupt.h>

void init() {
	// Digital I/O setup
	DDRB |= 1<<PB0; // PB0 as output
  30:	b8 9a       	sbi	0x17, 0	; 23
	DDRB &= ~(1<<PB2); // PB2 as input
  32:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= 1<<PB2; // Enable internal pull-up resistor
  34:	c2 9a       	sbi	0x18, 2	; 24
	
	DIDR0 |= (1<<AIN1D)|(1<<AIN0D); // Disable digital input buffer on AIN1/0 for power reduction
  36:	84 b3       	in	r24, 0x14	; 20
  38:	83 60       	ori	r24, 0x03	; 3
  3a:	84 bb       	out	0x14, r24	; 20
	
	// PWM setup
	TCCR0B |= (1<<CS00); // No prescaler
  3c:	83 b7       	in	r24, 0x33	; 51
  3e:	81 60       	ori	r24, 0x01	; 1
  40:	83 bf       	out	0x33, r24	; 51
	TCCR0A |= (1<<COM0A1)|(1<<WGM00)|(1<<WGM01); // Fast PWM on OC0A clear on match
  42:	8a b5       	in	r24, 0x2a	; 42
  44:	83 68       	ori	r24, 0x83	; 131
  46:	8a bd       	out	0x2a, r24	; 42
	OCR0A = 0; // Set PWM duty cycle to 0 initially
  48:	19 bc       	out	0x29, r1	; 41
	
	// Interrupt setup
	MCUCR |= (1<<ISC01); // Rising edge of INT0 generates interrupt
  4a:	85 b7       	in	r24, 0x35	; 53
  4c:	82 60       	ori	r24, 0x02	; 2
  4e:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1<<INT0); // Enable INT0
  50:	8b b7       	in	r24, 0x3b	; 59
  52:	80 64       	ori	r24, 0x40	; 64
  54:	8b bf       	out	0x3b, r24	; 59
	
	// Sleep mode setup
	MCUCR |= (1<<SE); // Enable sleep mode
  56:	85 b7       	in	r24, 0x35	; 53
  58:	80 62       	ori	r24, 0x20	; 32
  5a:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~((1<<SM1)|(1<<SM0)); // Set sleep mode to Idle
  5c:	85 b7       	in	r24, 0x35	; 53
  5e:	87 7e       	andi	r24, 0xE7	; 231
  60:	85 bf       	out	0x35, r24	; 53
	
	// Power reduction setup
	PRR |= (1<<PRTIM1)|(1<<PRADC); // disable Timer/Counter 1 and ADC
  62:	80 b5       	in	r24, 0x20	; 32
  64:	89 60       	ori	r24, 0x09	; 9
  66:	80 bd       	out	0x20, r24	; 32
	
	// ADC setup
	ADCSRA &= ~(1<<ADEN); // disable ADC
  68:	37 98       	cbi	0x06, 7	; 6
	ACSR &= ~(1<<ACD); // disable Analog comparator
  6a:	47 98       	cbi	0x08, 7	; 8
	
	// Disable watchdog timer
	asm volatile("WDR");
  6c:	a8 95       	wdr
	MCUSR &= ~(1<<WDRF); // Clear WDRF
  6e:	84 b7       	in	r24, 0x34	; 52
  70:	87 7f       	andi	r24, 0xF7	; 247
  72:	84 bf       	out	0x34, r24	; 52
	WDTCR |= (1<<WDCE)|(1<<WDE);
  74:	81 b5       	in	r24, 0x21	; 33
  76:	88 61       	ori	r24, 0x18	; 24
  78:	81 bd       	out	0x21, r24	; 33
	WDTCR = 0x00; // Turn off WDT
  7a:	11 bc       	out	0x21, r1	; 33
	
	sei(); // Enable interrups
  7c:	78 94       	sei
  7e:	08 95       	ret

00000080 <button_pressed>:
}

int button_pressed() {
	return !(PINB & (1<<PINB2)); // inverted because of active low switch
  80:	86 b3       	in	r24, 0x16	; 22
  82:	86 95       	lsr	r24
  84:	86 95       	lsr	r24
  86:	91 e0       	ldi	r25, 0x01	; 1
  88:	89 27       	eor	r24, r25
}
  8a:	81 70       	andi	r24, 0x01	; 1
  8c:	90 e0       	ldi	r25, 0x00	; 0
  8e:	08 95       	ret

00000090 <main>:

int main(void)
{
	init();
  90:	cf df       	rcall	.-98     	; 0x30 <init>
    while (1) 
    {
		asm volatile ("SLEEP");
  92:	88 95       	sleep
  94:	fe cf       	rjmp	.-4      	; 0x92 <main+0x2>

00000096 <__vector_1>:
    }
}

ISR (INT0_vect) {
  96:	1f 92       	push	r1
  98:	0f 92       	push	r0
  9a:	0f b6       	in	r0, 0x3f	; 63
  9c:	0f 92       	push	r0
  9e:	11 24       	eor	r1, r1
  a0:	2f 93       	push	r18
  a2:	3f 93       	push	r19
  a4:	4f 93       	push	r20
  a6:	5f 93       	push	r21
  a8:	6f 93       	push	r22
  aa:	7f 93       	push	r23
  ac:	8f 93       	push	r24
  ae:	9f 93       	push	r25
  b0:	af 93       	push	r26
  b2:	bf 93       	push	r27
  b4:	cf 93       	push	r28
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	87 ea       	ldi	r24, 0xA7	; 167
  bc:	91 e6       	ldi	r25, 0x61	; 97
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <__vector_1+0x28>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <__vector_1+0x2e>
  c4:	00 00       	nop
	_delay_ms(100);
	if (button_pressed()) {
  c6:	dc df       	rcall	.-72     	; 0x80 <button_pressed>
  c8:	89 2b       	or	r24, r25
  ca:	b9 f4       	brne	.+46     	; 0xfa <__vector_1+0x64>
  cc:	1b c0       	rjmp	.+54     	; 0x104 <__vector_1+0x6e>
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <__vector_1+0x3c>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <__vector_1+0x42>
  d8:	00 00       	nop
		// soft on
		while (button_pressed()) {
			_delay_ms(10);
			if (OCR0A < 255) {
  da:	89 b5       	in	r24, 0x29	; 41
  dc:	8f 3f       	cpi	r24, 0xFF	; 255
  de:	21 f0       	breq	.+8      	; 0xe8 <__vector_1+0x52>
				OCR0A++;
  e0:	89 b5       	in	r24, 0x29	; 41
  e2:	8f 5f       	subi	r24, 0xFF	; 255
  e4:	89 bd       	out	0x29, r24	; 41
  e6:	0a c0       	rjmp	.+20     	; 0xfc <__vector_1+0x66>
			} else { // blink to show brightness is at max level
				OCR0A = 0;
  e8:	19 bc       	out	0x29, r1	; 41
  ea:	89 e6       	ldi	r24, 0x69	; 105
  ec:	98 e1       	ldi	r25, 0x18	; 24
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <__vector_1+0x58>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <__vector_1+0x5e>
  f4:	00 00       	nop
				_delay_ms(25);
				OCR0A = 255;
  f6:	c9 bd       	out	0x29, r28	; 41
  f8:	01 c0       	rjmp	.+2      	; 0xfc <__vector_1+0x66>
  fa:	cf ef       	ldi	r28, 0xFF	; 255

ISR (INT0_vect) {
	_delay_ms(100);
	if (button_pressed()) {
		// soft on
		while (button_pressed()) {
  fc:	c1 df       	rcall	.-126    	; 0x80 <button_pressed>
  fe:	89 2b       	or	r24, r25
 100:	31 f7       	brne	.-52     	; 0xce <__vector_1+0x38>
 102:	07 c0       	rjmp	.+14     	; 0x112 <__vector_1+0x7c>
				OCR0A = 255;
			}
		}
	} else {
		// hard-on or off
		if (OCR0A == 0) { // toggle on if it's off
 104:	89 b5       	in	r24, 0x29	; 41
 106:	81 11       	cpse	r24, r1
 108:	03 c0       	rjmp	.+6      	; 0x110 <__vector_1+0x7a>
			OCR0A = 255;
 10a:	8f ef       	ldi	r24, 0xFF	; 255
 10c:	89 bd       	out	0x29, r24	; 41
 10e:	01 c0       	rjmp	.+2      	; 0x112 <__vector_1+0x7c>
		} else { // or toggle off if it's on
			OCR0A = 0;
 110:	19 bc       	out	0x29, r1	; 41
		}
	}
	while (!(PINB & (1<<PINB2))); //ghetto debounce
 112:	b2 9b       	sbis	0x16, 2	; 22
 114:	fe cf       	rjmp	.-4      	; 0x112 <__vector_1+0x7c>
 116:	87 ea       	ldi	r24, 0xA7	; 167
 118:	91 e6       	ldi	r25, 0x61	; 97
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <__vector_1+0x84>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <__vector_1+0x8a>
 120:	00 00       	nop
	_delay_ms(100);
}
 122:	ff 91       	pop	r31
 124:	ef 91       	pop	r30
 126:	cf 91       	pop	r28
 128:	bf 91       	pop	r27
 12a:	af 91       	pop	r26
 12c:	9f 91       	pop	r25
 12e:	8f 91       	pop	r24
 130:	7f 91       	pop	r23
 132:	6f 91       	pop	r22
 134:	5f 91       	pop	r21
 136:	4f 91       	pop	r20
 138:	3f 91       	pop	r19
 13a:	2f 91       	pop	r18
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <_exit>:
 146:	f8 94       	cli

00000148 <__stop_program>:
 148:	ff cf       	rjmp	.-2      	; 0x148 <__stop_program>
