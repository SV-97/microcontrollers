
C_001_Blink.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000156  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000188  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000769  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000691  00000000  00000000  00000951  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000294  00000000  00000000  00000fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001278  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  0000129c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c6  00000000  00000000  0000163b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001701  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e0       	ldi	r30, 0x02	; 2
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
#include <avr/io.h>

uint8_t x = 1, y=0;
int main(void)
{
	DDRD = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	8a b9       	out	0x0a, r24	; 10
	//_delay_ms(10);
	PORTD = (1<<PD0);
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	8b b9       	out	0x0b, r24	; 11
	
	uint8_t right = 0;
  ae:	90 e0       	ldi	r25, 0x00	; 0
		{
			PORTD = (PORTD<<1);
			_delay_ms(100);
			if (PORTD == 0x80)
			{
				right = 1;
  b0:	21 e0       	ldi	r18, 0x01	; 1
		{
			PORTD = (PORTD>>1);
			_delay_ms(100);
			if (PORTD == 0x01)
			{
				right = 0;
  b2:	30 e0       	ldi	r19, 0x00	; 0
	PORTD = (1<<PD0);
	
	uint8_t right = 0;
    while (1) 
    {
		if (right == 1)
  b4:	91 30       	cpi	r25, 0x01	; 1
  b6:	91 f4       	brne	.+36     	; 0xdc <main+0x36>
		{
			PORTD = (PORTD>>1);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	86 95       	lsr	r24
  bc:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	4f ef       	ldi	r20, 0xFF	; 255
  c0:	51 ee       	ldi	r21, 0xE1	; 225
  c2:	84 e0       	ldi	r24, 0x04	; 4
  c4:	41 50       	subi	r20, 0x01	; 1
  c6:	50 40       	sbci	r21, 0x00	; 0
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
			_delay_ms(100);
			if (PORTD == 0x01)
  d0:	8b b1       	in	r24, 0x0b	; 11
			{
				right = 0;
  d2:	92 2f       	mov	r25, r18
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	71 f7       	brne	.-36     	; 0xb4 <main+0xe>
  d8:	93 2f       	mov	r25, r19
  da:	ec cf       	rjmp	.-40     	; 0xb4 <main+0xe>
			}
		} else
		{
			PORTD = (PORTD<<1);
  dc:	8b b1       	in	r24, 0x0b	; 11
  de:	88 0f       	add	r24, r24
  e0:	8b b9       	out	0x0b, r24	; 11
  e2:	4f ef       	ldi	r20, 0xFF	; 255
  e4:	51 ee       	ldi	r21, 0xE1	; 225
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	41 50       	subi	r20, 0x01	; 1
  ea:	50 40       	sbci	r21, 0x00	; 0
  ec:	80 40       	sbci	r24, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <main+0x42>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <main+0x4c>
  f2:	00 00       	nop
			_delay_ms(100);
			if (PORTD == 0x80)
  f4:	8b b1       	in	r24, 0x0b	; 11
  f6:	80 38       	cpi	r24, 0x80	; 128
  f8:	e9 f6       	brne	.-70     	; 0xb4 <main+0xe>
			{
				right = 1;
  fa:	92 2f       	mov	r25, r18
  fc:	db cf       	rjmp	.-74     	; 0xb4 <main+0xe>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>
