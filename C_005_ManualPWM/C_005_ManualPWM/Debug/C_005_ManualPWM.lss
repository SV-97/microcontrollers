
C_005_ManualPWM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000148  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000820  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000320  00000000  00000000  00001146  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001468  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041a  00000000  00000000  0000149c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000013d  00000000  00000000  000018b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  000019f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a2 00 	jmp	0x144	; 0x144 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	uint16_t x;
	uint8_t readout_0, readout_1, readout_2;
	uint8_t fetch_analog();
	
	// DO init
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	
	// ADC init
	ADCSRA |= (1<<ADEN); // ADC on
  84:	ea e7       	ldi	r30, 0x7A	; 122
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1); // Prescaler to 8
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX0)|(1<<MUX1)|(1<<MUX2); // ADC Channel 0
  94:	ec e7       	ldi	r30, 0x7C	; 124
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	80 83       	st	Z, r24
	ADMUX |= (1<<ADLAR); // Left adjust the result
  9e:	80 81       	ld	r24, Z
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	80 83       	st	Z, r24
	DIDR0 |= (1<<ADC0D); // disable DI on Channel 0
  a4:	ee e7       	ldi	r30, 0x7E	; 126
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24
	
	// Dummy Readout
	x = fetch_analog();
  ae:	0e 94 97 00 	call	0x12e	; 0x12e <_Z12fetch_analogv>
	
	while (1)
	{
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)); // ADC Channel 0
  b2:	0c e7       	ldi	r16, 0x7C	; 124
  b4:	10 e0       	ldi	r17, 0x00	; 0
		ADMUX |= (1<<MUX0); // ADC Channel 1
		readout_1 = fetch_analog();
		ADMUX &= ~(1<<MUX0)|(1<<MUX1)|(1<<MUX2); // ADC Channel 0
		ADMUX |= (1<<MUX1); // ADC Channel 2
		readout_2 = fetch_analog();
		PORTD = 0xFF;
  b6:	dd 24       	eor	r13, r13
  b8:	da 94       	dec	r13
		for (uint8_t i=0; i < readout_0; i++)
		{
			_delay_us(1);
		}
		PORTD = 0;
		for (uint8_t i=0; i< 1024-readout_0; i++)
  ba:	e1 2c       	mov	r14, r1
  bc:	68 94       	set
  be:	ff 24       	eor	r15, r15
  c0:	f2 f8       	bld	r15, 2
	// Dummy Readout
	x = fetch_analog();
	
	while (1)
	{
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)); // ADC Channel 0
  c2:	f8 01       	movw	r30, r16
  c4:	80 81       	ld	r24, Z
  c6:	88 7f       	andi	r24, 0xF8	; 248
  c8:	80 83       	st	Z, r24
  ca:	ca e0       	ldi	r28, 0x0A	; 10
		for (uint8_t i=0; i<10; i++)
		{
			readout_0 = fetch_analog();	
  cc:	0e 94 97 00 	call	0x12e	; 0x12e <_Z12fetch_analogv>
  d0:	d8 2f       	mov	r29, r24
  d2:	c1 50       	subi	r28, 0x01	; 1
	x = fetch_analog();
	
	while (1)
	{
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)); // ADC Channel 0
		for (uint8_t i=0; i<10; i++)
  d4:	d9 f7       	brne	.-10     	; 0xcc <main+0x4c>
		{
			readout_0 = fetch_analog();	
		}
		ADMUX |= (1<<MUX0); // ADC Channel 1
  d6:	f8 01       	movw	r30, r16
  d8:	80 81       	ld	r24, Z
  da:	81 60       	ori	r24, 0x01	; 1
  dc:	80 83       	st	Z, r24
		readout_1 = fetch_analog();
  de:	0e 94 97 00 	call	0x12e	; 0x12e <_Z12fetch_analogv>
		ADMUX &= ~(1<<MUX0)|(1<<MUX1)|(1<<MUX2); // ADC Channel 0
  e2:	f8 01       	movw	r30, r16
  e4:	80 81       	ld	r24, Z
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	80 83       	st	Z, r24
		ADMUX |= (1<<MUX1); // ADC Channel 2
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
		readout_2 = fetch_analog();
  f0:	0e 94 97 00 	call	0x12e	; 0x12e <_Z12fetch_analogv>
		PORTD = 0xFF;
  f4:	db b8       	out	0x0b, r13	; 11
		for (uint8_t i=0; i < readout_0; i++)
  f6:	dd 23       	and	r29, r29
  f8:	a9 f0       	breq	.+42     	; 0x124 <main+0xa4>
  fa:	80 e0       	ldi	r24, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  fc:	00 00       	nop
  fe:	8f 5f       	subi	r24, 0xFF	; 255
 100:	d8 13       	cpse	r29, r24
 102:	fc cf       	rjmp	.-8      	; 0xfc <main+0x7c>
		{
			_delay_us(1);
		}
		PORTD = 0;
 104:	1b b8       	out	0x0b, r1	; 11
		for (uint8_t i=0; i< 1024-readout_0; i++)
 106:	c7 01       	movw	r24, r14
 108:	8d 1b       	sub	r24, r29
 10a:	91 09       	sbc	r25, r1
 10c:	18 16       	cp	r1, r24
 10e:	19 06       	cpc	r1, r25
 110:	c4 f6       	brge	.-80     	; 0xc2 <main+0x42>
		readout_1 = fetch_analog();
		ADMUX &= ~(1<<MUX0)|(1<<MUX1)|(1<<MUX2); // ADC Channel 0
		ADMUX |= (1<<MUX1); // ADC Channel 2
		readout_2 = fetch_analog();
		PORTD = 0xFF;
		for (uint8_t i=0; i < readout_0; i++)
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	00 00       	nop
		{
			_delay_us(1);
		}
		PORTD = 0;
		for (uint8_t i=0; i< 1024-readout_0; i++)
 116:	2f 5f       	subi	r18, 0xFF	; 255
 118:	42 2f       	mov	r20, r18
 11a:	50 e0       	ldi	r21, 0x00	; 0
 11c:	48 17       	cp	r20, r24
 11e:	59 07       	cpc	r21, r25
 120:	84 f6       	brge	.-96     	; 0xc2 <main+0x42>
 122:	f8 cf       	rjmp	.-16     	; 0x114 <main+0x94>
		PORTD = 0xFF;
		for (uint8_t i=0; i < readout_0; i++)
		{
			_delay_us(1);
		}
		PORTD = 0;
 124:	1b b8       	out	0x0b, r1	; 11
		for (uint8_t i=0; i< 1024-readout_0; i++)
 126:	c7 01       	movw	r24, r14
 128:	8d 1b       	sub	r24, r29
 12a:	91 09       	sbc	r25, r1
 12c:	f2 cf       	rjmp	.-28     	; 0x112 <main+0x92>

0000012e <_Z12fetch_analogv>:
	}
}

uint8_t fetch_analog()
{
	ADCSRA |= (1<<ADSC); // Start Analog readout
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 64       	ori	r24, 0x40	; 64
 136:	80 83       	st	Z, r24
	while (ADCSRA &(1<<ADSC)); // Wait until readout complete
 138:	80 81       	ld	r24, Z
 13a:	86 fd       	sbrc	r24, 6
 13c:	fd cf       	rjmp	.-6      	; 0x138 <_Z12fetch_analogv+0xa>
	return ADCH;
 13e:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 142:	08 95       	ret

00000144 <_exit>:
 144:	f8 94       	cli

00000146 <__stop_program>:
 146:	ff cf       	rjmp	.-2      	; 0x146 <__stop_program>
