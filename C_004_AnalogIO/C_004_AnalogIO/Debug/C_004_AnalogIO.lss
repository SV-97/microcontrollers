
C_004_AnalogIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070e  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000666  00000000  00000000  000008d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023c  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001178  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003cd  00000000  00000000  000011ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00001579  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
	uint16_t x;
	uint8_t readout_0, readout_1, readout_2;
	uint8_t fetch_analog();
	
	// DO init
	DDRD = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	
	// ADC init
	ADCSRA |= (1<<ADEN); // ADC on
  84:	ea e7       	ldi	r30, 0x7A	; 122
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	80 68       	ori	r24, 0x80	; 128
  8c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1); // Prescaler to 8
  8e:	80 81       	ld	r24, Z
  90:	83 60       	ori	r24, 0x03	; 3
  92:	80 83       	st	Z, r24
	ADMUX &= ~(1<<MUX0)|(1<<MUX1)|(1<<MUX2); // ADC Channel 0
  94:	cc e7       	ldi	r28, 0x7C	; 124
  96:	d0 e0       	ldi	r29, 0x00	; 0
  98:	88 81       	ld	r24, Y
  9a:	8e 7f       	andi	r24, 0xFE	; 254
  9c:	88 83       	st	Y, r24
	ADMUX |= (1<<ADLAR); // Left adjust the result
  9e:	88 81       	ld	r24, Y
  a0:	80 62       	ori	r24, 0x20	; 32
  a2:	88 83       	st	Y, r24
	DIDR0 |= (1<<ADC0D); // disable DI on Channel 0
  a4:	ee e7       	ldi	r30, 0x7E	; 126
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	81 60       	ori	r24, 0x01	; 1
  ac:	80 83       	st	Z, r24
	
	// Dummy Readout
	x = fetch_analog();
  ae:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z12fetch_analogv>
	
	while (1)
	{
		
		ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)); // ADC Channel 0
  b2:	88 81       	ld	r24, Y
  b4:	88 7f       	andi	r24, 0xF8	; 248
  b6:	88 83       	st	Y, r24
		for (uint8_t i = 0; i <= 2000; i++)
		{
			readout_0 = fetch_analog();
  b8:	0e 94 60 00 	call	0xc0	; 0xc0 <_Z12fetch_analogv>
			PORTD = readout_0;
  bc:	8b b9       	out	0x0b, r24	; 11
  be:	fc cf       	rjmp	.-8      	; 0xb8 <main+0x38>

000000c0 <_Z12fetch_analogv>:
	}
}

uint8_t fetch_analog() 
{
	ADCSRA |= (1<<ADSC); // Start Analog readout
  c0:	ea e7       	ldi	r30, 0x7A	; 122
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	80 64       	ori	r24, 0x40	; 64
  c8:	80 83       	st	Z, r24
	while (ADCSRA &(1<<ADSC)); // Wait until readout complete
  ca:	80 81       	ld	r24, Z
  cc:	86 fd       	sbrc	r24, 6
  ce:	fd cf       	rjmp	.-6      	; 0xca <_Z12fetch_analogv+0xa>
	return ADCH;
  d0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d4:	08 95       	ret

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
